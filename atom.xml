<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Yizhe Tang]]></title>
  <link href="http://typd.github.io/atom.xml" rel="self"/>
  <link href="http://typd.github.io/"/>
  <updated>2013-11-23T13:49:55+08:00</updated>
  <id>http://typd.github.io/</id>
  <author>
    <name><![CDATA[Yizhe Tang]]></name>
    <email><![CDATA[othertang@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My toolbelt]]></title>
    <link href="http://typd.github.io/blog/2013/11/23/my-toolbelt/"/>
    <updated>2013-11-23T13:16:00+08:00</updated>
    <id>http://typd.github.io/blog/2013/11/23/my-toolbelt</id>
    <content type="html"><![CDATA[<p>Being a developer facing a screen almost all the awake time, sooner or later you&rsquo;ll know an up to date toolbelt will make your life easier.</p>

<p><a href="http://typd.github.io/pages/toolbelt/">Here are the tools</a> I use for my daily life and work. Things are upgrading fast so that I&rsquo;ll update the list continuously.</p>

<!-- more -->


<h1>Laptop</h1>

<ul>
<li>mac: developer friendly, worth the price.</li>
<li><a href="http://www.alfredapp.com/">Alfred</a>: shortcut to what you want</li>
<li><a href="https://github.com/fikovnik/ShiftIt">Shiftit</a>: manage window size and position for OSX</li>
<li><a href="https://www.google.com/intl/en/chrome/browser/">Chrome</a>

<ul>
<li><a href="https://chrome.google.com/webstore/detail/autopager-chrome/mmgagnmbebdebebbcleklifnobamjonh?hl=zh-CN">Auto pager</a></li>
<li><a href="https://chrome.google.com/webstore/detail/evernote-web-clipper/pioclpoplcdbaefihamjohnefbikjilc?hl=zh-CN">Evernote button</a></li>
<li><a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb">Vimium</a>: This is AWESOME! Use keyboard to open links rather than mouse.</li>
</ul>
</li>
<li><a href="http://dropbox.com">dropbox</a></li>
<li><a href="http://www.mac-downloader.com/">Folx</a>: download manager for mac</li>
<li><a href="http://coppertino.com/vox/">Vox</a>: the best music player on mac as I know.</li>
<li><a href="http://www.zsh.org/">zsh</a>: a better shell with many improvements than bash</li>
<li><a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a>: provides nice themes for zsh, highly configurable</li>
<li><a href="http://www.vim.org/">vim</a>: I&rsquo;m a vim user and still learning it. Haven&rsquo;t tried emacs yet.

<ul>
<li><a href="https://github.com/scrooloose/nerdtree">nerdtree</a>: a tree explorer plugin.</li>
</ul>
</li>
<li><a href="http://www.jetbrains.com/idea/">IntelliJ</a>: a easy to use, highly configurable IDE for java. I prefer it to eclipse.</li>
<li><a href="http://www.jetbrains.com/pycharm/">PyCharm</a>: IDE for python. A free version is available.</li>
<li><a href="https://github.com/typd/cmd-dict">Command line En&lt;&ndash;>Zh dict</a>: own work</li>
<li><a href="https://github.com/typd/cmd-search">Command line search tool</a>: own work, search text within files</li>
</ul>


<h1>Tool sites</h1>

<ul>
<li><a href="http://www.evernote.com">Evernote</a>: besides taking notes, I also use it as a bookmark system like del.icio.us</li>
<li><a href="http://www.feedly.com">Feedly</a>: R.I.P. google reader</li>
<li><a href="http://www.github.com">Github</a></li>
<li><a href="http://www.douban.com">Douban</a>: I use it as a database for my read books and watched movies</li>
</ul>


<h1>Good stuff online</h1>

<ul>
<li><a href="http://rubyrogues.com/">Podcast &ndash; Ruby Rogus</a>: each week 4-6 rubiers pick a topic and share their thoughts</li>
<li><a href="https://learn.thoughtbot.com/giantrobots">Podcast &ndash; Thoughbot Giant Robots</a>: weekly technical interview</li>
</ul>


<h1>Developing and engineering</h1>

<h2>General</h2>

<ul>
<li><a href="http://python.org/">Python</a>: &ldquo;Explicit is better than implicit&rdquo;; prefer python3 to python2, as it has many improvements</li>
<li><a href="https://www.ruby-lang.org/en/">Ruby</a>: &ldquo;Convention over configuration&rdquo;</li>
<li><a href="http://pryrepl.org/">Pry</a>: a drop-in replacement to irb, many amazing features</li>
<li><a href="http://git-scm.com">Git</a>: no more svn</li>
</ul>


<h2>Project monitoring</h2>

<ul>
<li><a href="http://logstash.net/">Logstash</a>: highly configurable tool to manage events and program logs</li>
<li><a href="http://graphite.wikidot.com/">Graphite</a>: collect metrics from services and do scalable realtime graphing</li>
</ul>


<h2>Continuous integration</h2>

<ul>
<li><a href="http://jenkins-ci.org/">Jenkins</a>: still the best CI tool, easy to use, configurable, powerful</li>
</ul>


<h2>Machine Management</h2>

<ul>
<li><a href="https://github.com/saltstack/salt">Salt</a>: use config files to manage machines</li>
<li><a href="http://docs.fabfile.org/en/1.8/">Fabric</a>: execute commands remotely over ssh</li>
<li><a href="http://mmonit.com/monit/">Monit</a>: deployed to target machine for managing and monitor machine status</li>
<li><a href="http://upstart.ubuntu.com/">Upstart</a>: a better system service management tool than System-V</li>
</ul>


<h2>Misc</h2>

<ul>
<li><a href="http://www.highcharts.com/">Highcharts</a>: a js library to render nice charts</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[movie story line visualization]]></title>
    <link href="http://typd.github.io/blog/2013/11/12/movie-story-line-visualization/"/>
    <updated>2013-11-12T22:32:00+08:00</updated>
    <id>http://typd.github.io/blog/2013/11/12/movie-story-line-visualization</id>
    <content type="html"><![CDATA[<p>I was just watching a conf video which mentioned a graph I&rsquo;ve seen before.</p>

<p><img src="http://imgs.xkcd.com/comics/movie_narrative_charts.png" alt="" /></p>

<p>I&rsquo;ve interviewed a candidate from a research department of that company. He showed me this graph and said his project was about automatically generating store line graph like this. Use algorithms like DP, to re-order and group the character lines, reduce cross point count, etc. Those ideas make sense to me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[the right way of logging]]></title>
    <link href="http://typd.github.io/blog/2013/11/06/the-right-way-of-logging/"/>
    <updated>2013-11-06T22:19:00+08:00</updated>
    <id>http://typd.github.io/blog/2013/11/06/the-right-way-of-logging</id>
    <content type="html"><![CDATA[<p>After read the 12-factor app spec, I took a close look to the logging section. For an application, it feels so nature to write logs to a file. But I just feel something isn&rsquo;t right.</p>

<ul>
<li>Do I need a cleaner tool like log rotate, or just pretend they&rsquo;re small forever?</li>
<li>To debug something, I&rsquo;m just forced to ssh across ocean and use a crappy vim on the host to find something weird.</li>
</ul>


<p>&ldquo;Elephant in the room&rdquo;. Until I read <a href="http://adam.heroku.com/past/2011/4/1/logs_are_streams_not_files/">this post</a> in the spec, things become clear. Now here&rsquo;s my understanding.</p>

<!-- more -->


<p>The application log looks like a stream, and then it should be a stream. We normally append it to a file, just because that&rsquo;s the most obvious way of treating it. But it&rsquo;s defenitly not the only way. In fact for logging, the application&rsquo;s duty is done once it outputs to the stream. The logic of handling (append, rotate, clean) files, should (or say &ldquo;can&rdquo;) not be a part of the application.</p>

<p>But what to do then if the application doesn&rsquo;t handle the log stream output. It&rsquo;s actually easier and more robust to take it out. Tools like Unix pipe, and <a href="http://logstash.net/">logstash</a> or <a href="https://github.com/fluent/fluentd">fluend</a> are more good at it than any application side logging lib.</p>

<p>For simple file logging, you can use</p>

<pre><code>$ mydaemon &gt;&gt; /var/log/mydaemon.log
</code></pre>

<p>For distributed logging,</p>

<pre><code>$ mydaemon | logger
</code></pre>

<p>Or still want a log file</p>

<pre><code>$ mydaemon | tee /var/log/mydaemon.log | logger
</code></pre>

<p>The &ldquo;logger&rdquo; is a placeholder for tools like logstash, which can be assembled into any kind of pipe line easily. Logstash has <a href="http://logstash.net/docs/1.2.2/">doc</a> and <a href="http://cookbook.logstash.net/">cookbooks</a>. Just choose the input, output, filter as you need.</p>

<p>A typical setup may be:</p>

<pre><code>log stream
=&gt; shipper: send log through udp out of the host
=&gt; message queue: redis, mongodb, etc.
=&gt; parser: parse each line to get timestamp, attributes, etc. May ingest parse logic here
=&gt; elastic search: build index according to the parse result
=&gt; web ui: for centralized viewing, querying, alerting, etc.
</code></pre>

<p>Move the elephant out of the room.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The 12-factor app, all angles about building a robust app]]></title>
    <link href="http://typd.github.io/blog/2013/11/04/the-12-factor-app-all-angles-about-building-a-robust-app/"/>
    <updated>2013-11-04T23:41:00+08:00</updated>
    <id>http://typd.github.io/blog/2013/11/04/the-12-factor-app-all-angles-about-building-a-robust-app</id>
    <content type="html"><![CDATA[<p>Just read <a href="http://12factor.net/">The 12-factor app</a>, published by heroku, talked about all angles about how you should do and what you need to consider for building a robust app.</p>

<p>Software development, deployment are happening fast. So as the tool set is also changing fast. Developers exchange their tools and methodologies, but seems that&rsquo;s not enough. This is a useful spec to summarise not just tools to use, but the things to consider behind each part of an application.</p>

<p>My abstract notes here, without the unnecessary long sentences.</p>

<!-- more -->


<h1>Codebase</h1>

<ul>
<li>Use version control</li>
<li>There is always a one-to-one correlation between codebase and the app, but there will be many deploys of the app. A deploy is a running instance of the app.</li>
</ul>


<h1>Dependencies</h1>

<ul>
<li>Lib installed through a packaging system can be installed system-wide or vendoring/bundling</li>
<li>Never relies on implicit existence of system-wide packages
Declares all dependancies, completely and exactly, via a dependency declaration manifest.
Use a dependency isolation tool.</li>
<li>Never relies on system tools.
E.g. curl, those tools should be vendored into the app.</li>
</ul>


<h1>Config</h1>

<ul>
<li>Requires strict separation of config from code

<ul>
<li>A test for it: whether the codebase could be made open source at any moment</li>
<li>This does not include internal app config, e.g. config/routes.rb</li>
</ul>
</li>
<li>Stores config in environment variables, because

<ul>
<li>easy to change between deploys without changing any code</li>
<li>little chance of them being checked into code repo accidentally</li>
<li>not language nor os standard</li>
</ul>
</li>
</ul>


<h1>Backing services</h1>

<ul>
<li>Any service the app consumes over the network as part of its normal operation.</li>
<li>The code makes no distinction between local and third party services</li>
</ul>


<h1>Build, release, run</h1>

<ul>
<li>A codebase is transformed into a deploy through 3 stages:

<ul>
<li>Build stage: converts a code repo into an executable bundle.</li>
<li>Release stage: takes the build and combines it with config.</li>
<li>Run stage: runs the app in the execution environment.</li>
</ul>
</li>
<li>Uses strict separation between the build, release, and run stages.</li>
<li>Deployment tools typically offer release management tools, most notably the ability to roll back to a previous release.</li>
<li>Every release should have a unique ID</li>
<li>Runtime execution can happen automatically in cases such as a server reboot, or a crashed process being restarted. Therefore, the run stage should be kept to as few moving parts as possible.</li>
<li>Builds are initiated by devs whenever new code is deployed. The build stage can be complex, because dev is driving it.</li>
</ul>


<h1>Processes</h1>

<ul>
<li>12-factor processes are stateless and share-nothing. Any data that needs to persist must be stored in a stateful backing service.</li>
<li>Ram or disk of the process can be used as a brief, single-transaction cache. Never assumes anything cached in ram or disk will be available on a future request or job.</li>
<li>No &ldquo;sticky sessions&rdquo;: cache user session data in ram and expecting future requests from the same visitor to be routed to the same process. Recommend a datastore offers time-expiration, memcached or redis.</li>
</ul>


<h1>Port binding</h1>

<ul>
<li>Completely self-contained, does not rely on runtime injection of a webserver into the execution environment to create a web-facing service. The web app exports HTTP as a service by binding to a port</li>
</ul>


<h1>Concurrency</h1>

<ul>
<li>Processes are a first class citizen.</li>
<li>Adding more concurrency is simple because: share-nothing, horizontally partitionable nature</li>
<li>Should never daemonize or write PID files. But rely on OS&rsquo;s process manager to manage output streams, respond to crashed processes, and handle user-initiated restarts and shutdowns.</li>
</ul>


<h1>Disposability</h1>

<ul>
<li>Disposable: can be started or stopped at a moment&rsquo;s notice.</li>
<li>Processes should strive to minimize startup time.</li>
<li>Processes shut down gracefully when they receive a SIGTERM signal from the process manager.</li>
<li>Processes should also be robust against sudden death.</li>
</ul>


<h1>Dev/prod parity</h1>

<ul>
<li>Gaps between development and production

<ul>
<li>time gap: may take days, weeks, months to go into production</li>
<li>personal gap: developer write code, ops deploy it</li>
<li>tools gap: developers may use nginx, sqlite, osx, production may use apache, mysql, linux</li>
</ul>
</li>
<li>Design for continuous deployment, to keep the gap small

<ul>
<li>time gap: may have it deployed fast after write code</li>
<li>personal gap: dev are closely involved in deploying and watching it&rsquo;s behavior in production</li>
<li>tools gap: make development and production as similar as possible</li>
</ul>
</li>
<li>Resists the urge to use different backing services between development and production, because there may be tiny incompatibilities, cause to pass tests in local but fail in production. The cost is high over the lifetime.</li>
</ul>


<h1>Logs</h1>

<ul>
<li>Logs are the stream of aggregated, time-ordered events.</li>
<li>Never concern with routing or storage of log. Each running process writes its event stream, unbuffered, to stdout. In staging or production, each process&#8217; stream will be captured, collated and routed to final destinations. These destinations are not visible to or configurable by the app, but managed by the execution environment. (Logplex and Fluent can help)</li>
</ul>


<h1>Admin processes</h1>

<ul>
<li>Developers may often wish to do one-off tasks. These should be run in an identical env as the app. They run against a release, using the same code and config. Admin code must ship with application code to avoid synchronization issues.</li>
<li>The same dependency isolation techniques should be used on all process types.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A good point about the fresh guy for a project]]></title>
    <link href="http://typd.github.io/blog/2013/10/31/a-good-point-about-the-fresh-guy-for-a-project/"/>
    <updated>2013-10-31T22:48:00+08:00</updated>
    <id>http://typd.github.io/blog/2013/10/31/a-good-point-about-the-fresh-guy-for-a-project</id>
    <content type="html"><![CDATA[<p>Just heard this:</p>

<blockquote><p>The newest person to the project is really useful, because of his fresh eyes, that would point out what&rsquo;s broken or fix processes.</p></blockquote>

<p>Good point! For engineering quality, culture and communication, it&rsquo;s recommended to do more code and architecture reviews cross teams. I heard some agile web companies even rotate developers among different projects. That sounds awesome to me, although it may have a slow start and bring in some uncertainty.</p>

<p>To have the guys as smart as developers to collaborate well, some social practices become neccessary and more important.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Community edition of PyCharm!]]></title>
    <link href="http://typd.github.io/blog/2013/10/28/community-edition-of-pycharm/"/>
    <updated>2013-10-28T19:10:00+08:00</updated>
    <id>http://typd.github.io/blog/2013/10/28/community-edition-of-pycharm</id>
    <content type="html"><![CDATA[<p>Just found the python IDE from IDEA, PyCharm, released a community edition last month. Community edition means FREE! As an environment friendly language, python is good for both beginners and seniors. IDEA shares a good thing!</p>

<p>I knew IDEA from IntelliJ. The well known IDE for java, won much praise from others and me over eclipse. PyCharm has similar advantages:</p>

<ul>
<li>Simple UI, easy to use and understand</li>
<li>Highly configurable, key shortcuts, rich plugins</li>
<li>Fast, alghouth it consumes a lot memory</li>
</ul>


<p>I can live without an IDE, but if I use one, these are pretty much I need most. I use vim for both ruby and python, with proper grammar highlights and indention. The biggest concern I have for it, is about refactoring. For a bigger size project, I believe an IDE can help to make life easier. No matter how wonderful your vim or emacs is, IDE is designed to be better than it. It&rsquo;s clear to me, an desktop application has less limitation than a terminal one.</p>

<p>This free version is a good start for me. Let me see when I need the rich features from pro version, more framework build-in support, especially for web.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rewrite code from scratch?]]></title>
    <link href="http://typd.github.io/blog/2013/10/24/rewrite-code-from-scratch/"/>
    <updated>2013-10-24T11:18:00+08:00</updated>
    <id>http://typd.github.io/blog/2013/10/24/rewrite-code-from-scratch</id>
    <content type="html"><![CDATA[<p>As a developer, almost everyone has made a difficult choice, rewrite something from scratch. Joel Spolsky wrote <a href="http://www.joelonsoftware.com/articles/fog0000000069.html">this</a> to explain why you shouldn&rsquo;t do it. There&rsquo;re some good reasons.</p>

<h1>Article summary</h1>

<p>The very important, but hidden reason,</p>

<blockquote><p>It&rsquo;s hard to read code than to write it.</p></blockquote>

<p>It&rsquo;s definitly true. But no need to blame developers or the one made the rewrite decision. It&rsquo;s a nature fact in software. You don&rsquo;t necessarily have gone with the last version process, no memory, just code, may have spec or not, may have the code owner or not.</p>

<p>Then you may have bias to make the decision.</p>

<!-- more -->


<p>The old code is valuable because they are used, tested, bug found and fixed. The oppsite, if you throw them away,</p>

<ul>
<li>throw away knowledge</li>
<li>market leadership</li>
<li>put yourself in danger, you may have no shippable code for sometime</li>
</ul>


<p>The old code can be used because,</p>

<ul>
<li>Architecture problems can be refactored, though it&rsquo;s not easy but you can still get it done.</li>
<li>Performance issue can be solved by re-writing part of the code, not the whole.</li>
<li>Ugly code is not a real issue.</li>
</ul>


<h1>More thoughts</h1>

<p>This ariticle is good because it clearly pointed out the bias on legacy code. Though it keeps saying &ldquo;no need to rewrite&rdquo;, after indivisual understanded the bias, he can make the right desicion himself.</p>

<p>Some thoughts on the oppsite side,</p>

<ul>
<li><p>The technics, tools, methedologies are developing fast comparing to old times. Writing from scratch costs less than before.</p></li>
<li><p>The cost of delievering slow is becomming bigger.</p></li>
<li><p>The team morale of maintaining a legacy code should be considered</p></li>
</ul>


<p>There should always be a certain threshold of choosing to rewrite. Avoid bias from each side, choose your own.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My 2013 Beijing Marathon]]></title>
    <link href="http://typd.github.io/blog/2013/10/20/my-2013-beijing-marathon/"/>
    <updated>2013-10-20T16:49:00+08:00</updated>
    <id>http://typd.github.io/blog/2013/10/20/my-2013-beijing-marathon</id>
    <content type="html"><![CDATA[<p>我的第三次北马顺利完赛，贴着迷你的号牌跑完半程，时间2小时51分，比较上两次的30分和10分差了不少。但当然还是很有成就感，比赛中的记录：</p>

<ul>
<li><p>坐地铁从前门进入，人很多绕了很久。迷你选手没有给安排物品托运，所以我也准备好轻装外衣，跑步时背着跑。事实上不少全程半程选手也顾不得存包就上路，有些甚至没有轻装的准备，个别是背着不合理的书包跑。个人饮料是可以带入广场的，我带了瓶小乐虎，本打算喝完进广场，喝不下就扔掉，既然没人管也就没舍得扔，干脆路上喝完再扔。早餐吃了一块巧克力，另一块背着走。入场区厕所很多，很方便。</p></li>
<li><p>8点准时起跑，没有排队太久，很快就排到了出发线。可刚跑起来就发现问题，本来不得不背着衣服跑赛前就隐隐不爽，徒步可以，但负重跑步还没有类似经历。跑起来发现这个阿迪的袋子绳子太长，会上下跳动，相当不爽，要保证左右平衡，试了好几种背法，最终还是背在后面，左右绳在脖子多挂一层，相对颠簸较小。</p></li>
</ul>


<!-- more -->


<ul>
<li><p>背包不再去想，开始一会就觉得不是太好，很快开始出汗。觉得有些意外按上两次经验应该不会这么快累，况且今天天气很好。速度保持的比较稳，按2个半小时的期待，应该7分钟一公里，心里觉得一开始就差不多这个速度，后面再看余力。</p></li>
<li><p>到了大概2、3公里，还真是有些累了，试着走走。确实这个距离是绝少有人走的。印象中的疲劳期应该在4-8km，我调低了心理期待，也许这几年真的退化很多，现在体力不适合20km，那这次就跑多少算多少，8km，10km都行。</p></li>
<li><p>过了一小段疲劳期，很快到了迷你终点，还是很满意的。至少8km没问题。之后慢慢节奏有些感觉了，背包虽然没法避免，但其实可以降低它的影响，屁股幅度小一些，重心再平一些，袋子的颠簸也会小，这样它的影响确实不算很大。前面的路程其实可以跑的好一点。</p></li>
<li><p>6到10公里下来还算顺利，很快喝完了乐虎，还拿了几次场外饮料。发现跑起来真的很缺水。这几公里也认识到这次真的不轻松，累了就走一走恢复，也不能停太久爬身体节奏改变，总体平均速度还是很稳定的。大概是9点15到10km。</p></li>
<li><p>9点半到12km。膝盖没不适感，体力还有一些，知道半程完赛没问题，只是时间不要太晚。10到18km也没有想太多，背包已经不是问题了，阻碍的只是体力。14km的时候吃了整块巧克力，似乎稍晚了一点。</p></li>
<li><p>18km的时候感到胜利在望，想把体力在最后3km用掉，心想后面可以靠意志坚持跑下来。但最终还是需要夹着走路恢复，说明已经是体力问题，这次发挥了全部，没有好遗憾的。</p></li>
<li><p>虽然后面几公里道路已经陆续解封，跑步的人流还在，到达半程的时候还是很高兴。退步难避免，实力还在，完赛是一个锚点，意味着以后还会挑战或者保持这个距离。一路上老头老太太大有人在，这个成绩于我来说还有很大上升空间，甚至超过以往</p>

<ul>
<li>背包从全程来说确实还是有负担，要同时顾及身体和背包的重心。如果能创造条件托运最好。</li>
<li>如果赛前简单试试节奏，会让前5km跑的比这次略微好一点。</li>
<li>最关键的，没有诀窍，不过是规律训练。就我所知只要规律训练，长距离对普通体质的人不算难事，年龄也不是阻碍，路上的老头老太太不见得有太好的条件，不外乎规律训练。规律训练之后才会遇到体质和年龄瓶颈。</li>
</ul>
</li>
</ul>


<p>很满足。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beijing marathon again]]></title>
    <link href="http://typd.github.io/blog/2013/10/19/beijing-marathon-again/"/>
    <updated>2013-10-19T19:36:00+08:00</updated>
    <id>http://typd.github.io/blog/2013/10/19/beijing-marathon-again</id>
    <content type="html"><![CDATA[<p>时隔六年，终于再次报上了北马！明天是个好天气！在我的北马记忆里，有清北起跑前的斗气，TAM起跑时的广阔感，途中一个化工大的教授赶着铁环跑半程，不知道今年还在不在。</p>

<p>一个遗憾，今年只报上了迷你4km，争取赖着跑下半程。这次的比赛物品，发图留念，</p>

<p><img src="http://typd.github.io/images/posts/2013-10-19/1.jpg" alt="" />
<img src="http://typd.github.io/images/posts/2013-10-19/2.jpg" alt="" />
<img src="http://typd.github.io/images/posts/2013-10-19/3.jpg" alt="" />
<img src="http://typd.github.io/images/posts/2013-10-19/4.jpg" alt="" />
<img src="http://typd.github.io/images/posts/2013-10-19/5.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python history, a talk from Guido]]></title>
    <link href="http://typd.github.io/blog/2013/10/18/python-history-a-talk-from-guido/"/>
    <updated>2013-10-18T23:17:00+08:00</updated>
    <id>http://typd.github.io/blog/2013/10/18/python-history-a-talk-from-guido</id>
    <content type="html"><![CDATA[<p>This <a href="http://bit.ly/nsaEak">talk</a> titled &ldquo;History of Python&rdquo; is from Guido at Dropbox, before he joined Dropbox. It&rsquo;s a great talk, especially for python fans like me.</p>

<h1>Notes</h1>

<p>Guido was inspired by ABC. He commented on ABC&rsquo;s goods and bads.</p>

<p>Python is originally for day to day work (yes, every language inventor says that).</p>

<!-- more -->


<p>He had good summary on the philosophies behinds python, and they&rsquo;re also useful for other tasks.</p>

<pre><code>Skunkworks (early days) Design philosophy
- Borrow ideas whenever it makes sense
- As simple as possible, no simpler (Einstein)
- Do one thing well (UNIX)
- Don't fret about performance (fix it later)
- Go with the flow (don't fight env)
- Perfection is the enemy of the good
- Cutting corners is okay (get back to it later)

User-centric design philosophy
- Avoid platform ties, but not religiously
- Don't bother the user with details
- Discourage but allow coding to the platform
- Offer multiple levels of extensibility
- Errors should not be fatal, if possible
- Errors should never pass silently
- Don't blame the user for bugs in python
</code></pre>

<p>Also, he recalled the process of python community growing up. That&rsquo;s the main reason of python&rsquo;s success.</p>

<p>In Q&amp;A section,</p>

<ul>
<li>Didn&rsquo;t know unicode at early days</li>
<li>About pyc files:

<ul>
<li>the first version of python doesn&rsquo;t have pyc, it parses the module first, but,

<ul>
<li>the parser is relatively slow</li>
<li>need much memory</li>
</ul>
</li>
<li>some may release pyc file to avoid source code leak, but there&rsquo;re pasers can decode pyc well</li>
<li>python3 only have one directory for pyc files</li>
</ul>
</li>
<li>Regrets about python

<ul>
<li>lambda can be done in other ways</li>
<li>reduce() method is hard to read</li>
<li>unicode for python2</li>
</ul>
</li>
<li>Alternative python implementations

<ul>
<li>always encourage others</li>
<li>pypy is written by increadible smart peoples, sometimes they&rsquo;re too smart for their own good, they write really complicated stuff, &hellip; some code has explosion of cleverness, you hope it&rsquo;s right, if not, there&rsquo;s only one person in the world can debug it</li>
</ul>
</li>
<li>Q: back to early days, will you do unit testing, what would it look like?

<ul>
<li>In 96-98, we made long effects to add tests, before that, very few tests</li>
<li>Not much sense about testing in early days</li>
</ul>
</li>
<li>Python2 and python3

<ul>
<li>In 5 years, everybody gonna use py3</li>
</ul>
</li>
</ul>


<h1>Others</h1>

<p>I&rsquo;ve seen Guido&rsquo;s talk several times, and luckily seen in person once. He&rsquo;s a typical geek to me, has his own style, talks slowly and logically, mature, respect the audiences, and love to interact with community. And he&rsquo;s  pratical, you can know that from this talk. He may not like to do &ldquo;really&rdquo; smart things to amaze the crowd.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A data science sharing from Hilary Mason of bit.ly]]></title>
    <link href="http://typd.github.io/blog/2013/10/16/a-data-science-sharing-from-hilary-mason-of-bit-dot-ly/"/>
    <updated>2013-10-16T23:17:00+08:00</updated>
    <id>http://typd.github.io/blog/2013/10/16/a-data-science-sharing-from-hilary-mason-of-bit-dot-ly</id>
    <content type="html"><![CDATA[<p>This is a <a href="https://bitly.com/A5Mjsv">good talk</a> from Chief Scientist at bit.ly. It&rsquo;s interesting to use and present your data wisely indeed. And I&rsquo;m more interested at the factors make this a good talk</p>

<ul>
<li>The solid work and thinking behind</li>
<li>A logical structure of the talk</li>
<li>The attibute of sharing, not just showing off the done work or owned data</li>
<li>A good researcher needs to have a practical tool set, and good engineering sense</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Qt and PyQt]]></title>
    <link href="http://typd.github.io/blog/2013/10/16/qt-and-pyqt/"/>
    <updated>2013-10-16T18:46:00+08:00</updated>
    <id>http://typd.github.io/blog/2013/10/16/qt-and-pyqt</id>
    <content type="html"><![CDATA[<p>Sometimes it bothers me how to write UI program cross-platform, or just get rid of Visual Studio. Qt has been referenced a lot for that. Here are some notes based on my experience, understanding of Qt, pyQt.</p>

<h1>What&rsquo;s Qt</h1>

<ul>
<li><p>Quoted, <a href="http://qt-project.org/">Qt</a> is a cross-platform application and UI framework for developers using C++ or QML, a CSS &amp; JavaScript like language.</p></li>
<li><p>Owned by Nokia previously, then was sold to Digia.</p></li>
<li><p>Natively, you need to write C++.</p></li>
<li><p>Qt Creator is the supporting Qt IDE. Within it, Qt Designer is used for composing UI. Seems it looks pretty much like the WinForm drag down support from Visual Studio.</p></li>
<li><p>Highlights: cross-platform, native appearance based on platform, which means by using same code base, the release program may look like a windows program on windows, and a mac one on mac.</p></li>
<li><p>Latest version, Qt5.1</p></li>
</ul>


<!-- more -->


<h1>Python solution</h1>

<p>Of course you don&rsquo;t have to write C++. PyQt and pySide are the py solutions.</p>

<ul>
<li>PyQt

<ul>
<li>Uses same verion number as Qt, PyQt4 is for Qt4, PyQt5 is for PyQt5.</li>
<li>Owned by riverbank, a uk company.</li>
<li>Licenses including GPL v3 and a commercial license. Which means for commercial usages, pay it <a href="http://www.riverbankcomputing.co.uk/commercial/buy">here</a></li>
</ul>
</li>
<li>pySide

<ul>
<li>License LGPL, no need to pay for commercial usage</li>
<li>Seems not under actively developing, release for Qt5 is still not ready yet, <a href="http://qt-project.org/wiki/PySide_Roadmap">pySide roadmap</a></li>
</ul>
</li>
</ul>


<p>I choose <a href="http://www.riverbankcomputing.com/software/pyqt/download5">PyQt5</a>.</p>

<h1>Setup them</h1>

<p>Things to do</p>

<ul>
<li>Install Qt5, which contains Qt Creator

<ul>
<li><a href="http://qt-project.org/downloads">download</a></li>
</ul>
</li>
<li>Install PyQt

<ul>
<li>note, I had problem with python3, python2 works fine</li>
<li>Install SIP, seems SIP is used for converting C++ code to python

<ul>
<li><a href="http://www.riverbankcomputing.com/software/sip/download">download</a></li>
<li>note, the hg checked out version has a problem on sip.h, the tar ball works fine</li>
<li>python configurate.py &amp;&amp; make &amp;&amp; make install</li>
<li>add sip executor to your PATH</li>
</ul>
</li>
<li>Install PyQt5

<ul>
<li><a href="http://www.riverbankcomputing.co.uk/software/pyqt/download5">download</a></li>
<li>python configurate.py &amp;&amp; make &amp;&amp; make install</li>
</ul>
</li>
</ul>
</li>
</ul>


<h1>Examples</h1>

<p>PyQt examples are included in the tar ball, PyQt-gpl-5.1/examples. Start it from PyQt-gpl-5.1/examples/qtdemo/qtdemo.py</p>

<p>An example can be as simple as</p>

<pre><code>import sys

from PyQt5.QtWidgets import QApplication
from PyQt5.QtWidgets import QWidget

class Window(QWidget):
    def __init__(self, parent=None):
        super(Window, self).__init__(parent)
        self.resize(360, 150)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = Window()
    window.show();
    app.exec_()
</code></pre>

<h1>Some more</h1>

<p>Qt, PyQt, pySide seems all these are not well maintained. The offical sides are as convinient as I suppose they should be. Instructions, readmes, sample code contains some bug and mistakes more or less.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[articals from The best software writing I]]></title>
    <link href="http://typd.github.io/blog/2013/10/14/articals-from-the-best-software-writing-i/"/>
    <updated>2013-10-14T22:51:00+08:00</updated>
    <id>http://typd.github.io/blog/2013/10/14/articals-from-the-best-software-writing-i</id>
    <content type="html"><![CDATA[<p>The best software writing I is a book contains Joel Spolsky&rsquo;s selection and some comments of articals around 2004 or so, while this is the Joel of &ldquo;Joel on Software&rdquo;. I found the orginal posts&#8217; links are available in this doubaner&rsquo;s <a href="http://book.douban.com/review/1449189/">review</a>. Some worth a read, some worth to be shared,</p>

<ul>
<li><p><a href="http://paulgraham.com/gh.html">Great Hackers</a> by Paul Graham, you know &ldquo;Hackers and Painters&rdquo;</p>

<p>It&rsquo;s a long post with nice words.</p>

<p>A great hacker has much much more productivity than a normal developer. Someone says there&rsquo;re 5 levels of developers, the productivity scales 10 between each 2 levels.</p>

<p>Hackers have strong curiosity, the intention to know how things work.</p>

<p>No guarantee on whether someone can become a hacker or not. Raw talent, habit, even personality decides your potential. It&rsquo;s even hard to identify if someone is a hacker.</p>

<p>Release the hackers!</p></li>
</ul>


<!-- more -->


<ul>
<li><p><a href="http://blogs.msdn.com/b/ericlippert/archive/2003/10/28/53298.aspx">How many Microsoft employees does it take to change a lightbulb?</a></p>

<p>Microsoft seems to be an old-fasion in software world to me. The software technics and theories have changed a lot since delivered software is not as popular as cloud ones. We should all know the differences. The key to the first one is stability, every change there is expensive, while the later one we need most is rapid developing and delivering.</p>

<p>No matter what, I really admire Microsoft delivers softwares as complicated as windows and office, even having thousands of developers work on one project is a miracal, needs excellent software engineering with no doubt.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读书笔记转载《程序员的思维修炼》]]></title>
    <link href="http://typd.github.io/blog/2013/10/13/du-shu-bi-ji-zhuan-zai-cheng-xu-yuan-de-si-wei-xun-lian/"/>
    <updated>2013-10-13T22:51:00+08:00</updated>
    <id>http://typd.github.io/blog/2013/10/13/du-shu-bi-ji-zhuan-zai-cheng-xu-yuan-de-si-wei-xun-lian</id>
    <content type="html"><![CDATA[<p>偶然看到别人的《程序员的思维修炼》读书笔记，想起来自己也读过，确实还不错。这本书帮助从程序员的角度对自身能力进行反思，道理并不复杂，很多时候生产力就来自于把简单的事情理清楚。经常反思自己是一种好的习惯，对所有人都是。</p>

<p>自己也做了读书笔记，不过是更按自己记忆所需，比如这个版本碎片化可读性强，转载下来：</p>

<!-- more -->


<p><a href="http://blog.leezhong.com/reading/2013/10/06/pragmatic-thinking-and-learning.html">http://blog.leezhong.com/reading/2013/10/06/pragmatic-thinking-and-learning.html</a></p>

<pre><code>培养幽默感，以建立更强大的隐喻。

两个想法相距越远，越难以通过有效的隐喻联系起来。但我们遇到一个格外具有创造性的隐喻，且两参照系距离适中，我们就不得不几百年来一直歌颂这位作者。

增加感官体验，以促进大脑的使用。

直觉和模式匹配能力超越了显性知识。

你的价值取决于你为团队带来的价值。

大脑不是软件，软件不会老化，不会退化。但是大脑必须刷新，必须使用，否则就会丢失记忆。

R型在存储输入方面非常卖力，事实上可能你的每次经历，无论多么平淡乏味，都会被存储。但是它不一定被索引。当你努力解决一个问题时，R型进程会搜索你的所有记忆以寻找解决方案。

L型处理语言、分析、符号、抽象、时间、推理、数字、逻辑、现象思维。

R型处理直觉、综合、想象。

积极的情感对学习和创造性思维非常关键。当你充满了消极情绪时，你的大脑就开始停止提供多余的资源。

美学可以改变这些，不论是用户界面、代码和注释的布局，还是变量名的选择或桌面的整理。

当你努力解决一个问题时，你的所有记忆都会被扫描——甚至那些你无法主动唤醒的记忆。

养成一种收集思维鹅卵石的习惯，一旦有了积累，造墙的过程就会很容易。

你是否注意到伟大的想法或者领悟可能会在最出乎意料的时候降临？比如洗澡、刷盘子或其他一些枯燥、琐碎的工作时。这是因为L型有点厌倦了这种常规任务，走了神，这才让R型得以自由地展示自己地发现。

改变解决问题的角度（角色扮演）。

培养快速的洞察力，寻找不相关事物之间的关系或类比。

大脑不是一个用于填充的容器，而是一束需要点燃的火焰。这不是别人可以帮你做的，而是一件你必须自己做的事情。

建立SMART任务实现你的目标。

所有的知识投资都有价值。即使你从来不会在工作中使用某项技术，它也会影响你思考和解决问题的方式。

考虑投资的回报率。

当你种菜时，如果菜长的不好，你不会怪责菜，你会寻找其他理由。菜可能需要更多的肥料或者水，或者少晒太阳，你决不会怪责菜。

SQ3R主动学习法(Survy, Question, Read, Recite, Review)。

使用思维导图做笔记。

以教代学（橡皮鸭调试法），向你所在领域之外的人解释。

把事物分成大脑足以容纳的几部分。

L型模式的CPU有一种「空闲循环」程序，如果没有更紧迫的事情值得你去注意，闲置程序将会停留在一些低等级的困扰或紧急的问题上，而这会干扰R型的处理。

大部分冥想、瑜伽以及类似的练习都是为了这个相同的目标：缓和大脑里L型嘈杂的声音所带来的痛苦，生活在此刻，不要将你的精力不必要的分散，因为内心中喋喋不休的事情会击倒我们。

使用wiki来管理信息和知识。

「不作为」是敌人，「错误」不是。

给新习惯适应的时间。

制定一段时间计划，然后努力实现。跟踪你的进度，当你感觉做得不够时，重新审视你的成果。

信念是真实的，你必须相信这种改变是可能的。

采取步步为营的细小步骤。

新手的大脑有很多可能性，但是专家的却很少。

抓住方向盘，不要自动驾驶。
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello]]></title>
    <link href="http://typd.github.io/blog/2013/07/12/hello/"/>
    <updated>2013-07-12T16:39:00+08:00</updated>
    <id>http://typd.github.io/blog/2013/07/12/hello</id>
    <content type="html"><![CDATA[<h1>hello world</h1>

<p>this is the first line.</p>

<p>this is the second line</p>
]]></content>
  </entry>
  
</feed>
