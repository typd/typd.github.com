<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Yizhe Tang]]></title>
  <link href="http://typd.github.io/atom.xml" rel="self"/>
  <link href="http://typd.github.io/"/>
  <updated>2020-03-19T17:40:45+08:00</updated>
  <id>http://typd.github.io/</id>
  <author>
    <name><![CDATA[Yizhe Tang]]></name>
    <email><![CDATA[othertang@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[谈谈技术管理 @ QCon 上海 2018]]></title>
    <link href="http://typd.github.io/blog/2018/10/19/qcon/"/>
    <updated>2018-10-19T23:59:00+08:00</updated>
    <id>http://typd.github.io/blog/2018/10/19/qcon</id>
    <content type="html"><![CDATA[<p><img src='http://typd.github.io/res/2018-10-19/20181011-QCon-v3_001.png' width="80%"/><br/></p>

<!-- more -->


<p><img src='http://typd.github.io/res/2018-10-19/20181011-QCon-v3_002.png' width="80%"/><br/>
<img src='http://typd.github.io/res/2018-10-19/20181011-QCon-v3_003.png' width="80%"/><br/>
<img src='http://typd.github.io/res/2018-10-19/20181011-QCon-v3_004.png' width="80%"/><br/>
<img src='http://typd.github.io/res/2018-10-19/20181011-QCon-v3_005.png' width="80%"/><br/>
<img src='http://typd.github.io/res/2018-10-19/20181011-QCon-v3_006.png' width="80%"/><br/>
<img src='http://typd.github.io/res/2018-10-19/20181011-QCon-v3_007.png' width="80%"/><br/>
<img src='http://typd.github.io/res/2018-10-19/20181011-QCon-v3_008.png' width="80%"/><br/>
<img src='http://typd.github.io/res/2018-10-19/20181011-QCon-v3_009.png' width="80%"/><br/>
<img src='http://typd.github.io/res/2018-10-19/20181011-QCon-v3_010.png' width="80%"/><br/>
<img src='http://typd.github.io/res/2018-10-19/20181011-QCon-v3_011.png' width="80%"/><br/>
<img src='http://typd.github.io/res/2018-10-19/20181011-QCon-v3_012.png' width="80%"/><br/>
<img src='http://typd.github.io/res/2018-10-19/20181011-QCon-v3_013.png' width="80%"/><br/>
<img src='http://typd.github.io/res/2018-10-19/20181011-QCon-v3_014.png' width="80%"/><br/>
<img src='http://typd.github.io/res/2018-10-19/20181011-QCon-v3_015.png' width="80%"/><br/>
<img src='http://typd.github.io/res/2018-10-19/20181011-QCon-v3_016.png' width="80%"/><br/>
<img src='http://typd.github.io/res/2018-10-19/20181011-QCon-v3_017.png' width="80%"/><br/>
<img src='http://typd.github.io/res/2018-10-19/20181011-QCon-v3_018.png' width="80%"/><br/>
<img src='http://typd.github.io/res/2018-10-19/20181011-QCon-v3_019.png' width="80%"/><br/>
<img src='http://typd.github.io/res/2018-10-19/20181011-QCon-v3_020.png' width="80%"/><br/>
<img src='http://typd.github.io/res/2018-10-19/20181011-QCon-v3_021.png' width="80%"/><br/>
<img src='http://typd.github.io/res/2018-10-19/20181011-QCon-v3_022.png' width="80%"/><br/>
<img src='http://typd.github.io/res/2018-10-19/20181011-QCon-v3_023.png' width="80%"/><br/>
<img src='http://typd.github.io/res/2018-10-19/20181011-QCon-v3_024.png' width="80%"/><br/>
<img src='http://typd.github.io/res/2018-10-19/20181011-QCon-v3_025.png' width="80%"/><br/>
<img src='http://typd.github.io/res/2018-10-19/20181011-QCon-v3_026.png' width="80%"/><br/>
<img src='http://typd.github.io/res/2018-10-19/20181011-QCon-v3_027.png' width="80%"/><br/>
<img src='http://typd.github.io/res/2018-10-19/20181011-QCon-v3_028.png' width="80%"/><br/>
<img src='http://typd.github.io/res/2018-10-19/20181011-QCon-v3_029.png' width="80%"/><br/>
<img src='http://typd.github.io/res/2018-10-19/20181011-QCon-v3_030.png' width="80%"/><br/>
<img src='http://typd.github.io/res/2018-10-19/20181011-QCon-v3_031.png' width="80%"/><br/>
<img src='http://typd.github.io/res/2018-10-19/20181011-QCon-v3_032.png' width="80%"/><br/>
<img src='http://typd.github.io/res/2018-10-19/20181011-QCon-v3_033.png' width="80%"/><br/>
<img src='http://typd.github.io/res/2018-10-19/20181011-QCon-v3_034.png' width="80%"/><br/>
<img src='http://typd.github.io/res/2018-10-19/20181011-QCon-v3_035.png' width="80%"/><br/>
<img src='http://typd.github.io/res/2018-10-19/20181011-QCon-v3_036.png' width="80%"/><br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[团队稳定性]]></title>
    <link href="http://typd.github.io/blog/2018/04/06/team-stability/"/>
    <updated>2018-04-06T22:36:00+08:00</updated>
    <id>http://typd.github.io/blog/2018/04/06/team-stability</id>
    <content type="html"><![CDATA[<p>This is an old post written in 2016.</p>

<h1>问题是什么</h1>

<ul>
<li>涉及到人的问题，这里谈的“稳定”一定是相对的稳定，让大家愿意尽可能久的在一起把一件事情做好。</li>
<li>所以要解决的问题是如何让每个人“愿意”，而非“lead怎么看”，“团队为何需要稳定”，“稳定有什么好处”。</li>
<li>关注到个人，也只用回答一个问题——工作给员工带来什么价值，为什么这里个好选择</li>
</ul>


<p>工作可带来的价值很多，个人的需要也太多，lead可做的不外乎几件事</p>

<ul>
<li>认识这份工作，分析它对个人带来的价值，明显的、不明显的，针对不同人群的独特的价值</li>
<li>识别个人需求，马斯洛需求是答案摆在那里，实操怎么识别</li>
<li>引导两者的匹配</li>
</ul>


<h1>认识工作</h1>

<p>工作带来现金收益、资历、权力、安全感、归属感等这些很容易看到。但不止于此。如果不多走一步，终究无法回答“为什么这里是个好选择”。</p>

<p>用风控开发组做例子，和其他工作相比</p>

<ul>
<li>对接公司几乎所有业务，涉及背景知识多，每个RD会与很多个小组跟进任务</li>
<li>关系到交易，工作状态较为紧张，需求通常比较急，任务包含技术、非技术，优先级随时调整</li>
<li>技术方案不固定，需要前瞻性和视野，大思路以解决问题优先；早期代码质量不高，读起来并不愉快</li>
</ul>


<p>以上是陈述，Lead要实事求是的，理解、挖掘其中价值</p>

<ul>
<li>技术：不直接深入使用某种特定技术，但对代码严谨性、构架性能、灵活性、工程过程要求很高；涉及到大数据、安全、存储等技术使用，要求逆向思维，需要广泛的技术视野和执行力</li>
<li>业务：和所有业务对接不必说，风控本身就是一向复杂的“业务技术”，有充分的机会向PM、AE学习，而实践方案又是灵活的，RD有足够自主设计权；另一方面，控制极大的交易流，重要性和带来的成就感很明显</li>
<li>任务管理：任务、项目摆在那里，需要很强的管理、并行化能力，这样的要求其实不是很多工作具备，但也不是所有人都愿意适应的</li>
<li>沟通：大量的沟通，是要求也是机会
除了工作的特点之外，如何营造团队的独特性，带来如技术氛围、安全感、归属感、被认同、成就感，也是lead要做的。</li>
</ul>


<h1>识别个人需求</h1>

<p>虽没有公式，但是有据可循。而且观察远比“问”来的有效，因为对方很可能自己也拿捏不准（越年轻越是如此），或者不笃定，或者不愿回答。</p>

<p>观察这件事，做的细是不会错的。个人的优点、不足，遇事的正面、负面情绪，愿意、不愿意做的事情，从工作、日常、一次谈话、一次TB、一次户外都能找到。</p>

<h1>引导工作价值和个人需求匹配</h1>

<p>引导最难，因为依赖前两点的完成质量。换句话说，引导本不应该那么难。</p>

<p>如果 1) 员工有明确的需求，2) 工作可以带来，3) 员工认识到1和2，很好。</p>

<p>如果问题在3，一次谈话，一段时间，问题会自然消退。</p>

<p>如果问题在2，可以先从小的任务、项目调整来尝试，再者lead要回头想想“认识工作”是否没有到位，抛开成见，工作价值是否只有自己认为的那些。</p>

<p>不然，问题就是1了。不论是没有明确需求，还是需求无法从工作中满足，lead都有必要站在对方立场上，理解其想法，帮助推衍最真实的需求。因为有时候并不像对方说表达的那样，且lead作为过来人有责任加入自己的理解、经验，客观的指导员工应该需要什么——这是lead的义务，也是员工的需要。</p>

<p>推衍时，多问几个为什么，几乎都可以得到马斯洛需求里的某个层次。谈到具体的需求，要注意帮助员工合理定位自己，即员工处在哪个阶段，这个阶段哪些比较重要，为什么。</p>

<p>引导的工作应该日常做，常常做，最终效果与大家的信任感、指导的客观性有很大关系。</p>

<p>最后回到问题，“工作给员工带来什么价值，为什么这里个好选择”，这是lead经常要思考的，代入到每个人，带着答案管理团队。</p>

<h1>附</h1>

<p>ArchSummit 2014 奇虎 副总裁 谭晓生在研发体系构建专题中谈到的</p>

<ul>
<li>程序员的大脑是复杂的，不要妄图认为他们“简单”，他们只是不会说或者懒得说</li>
<li>自己以往用感情带团队，需要艰难决策时很难做，现在很直白用利益（机会、空间、钱等）带团队，行事顺利</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design picks]]></title>
    <link href="http://typd.github.io/blog/2018/02/13/design-picks/"/>
    <updated>2018-02-13T22:45:00+08:00</updated>
    <id>http://typd.github.io/blog/2018/02/13/design-picks</id>
    <content type="html"><![CDATA[<p>With interests on design, this talk really took me some time to prepare, re-read books, organize ideas, pay attention to everyday objects&hellip;</p>

<p>&ldquo;Design thinking&rdquo; gives a new view to everything around.</p>

<br/>




<div id="pdf-20180213" style="width:600px;height:400px"></div>


<script>
var options = {
  pdfOpenParams: {
  pagemode: "thumbs",
  navpanes: 0,
  toolbar: 0,
  statusbar: 0,
  view: "FitV"
  }
};
PDFObject.embed("/res/design-picks/20170221-design-picks.pdf", "#pdf-20180213", options);
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programmer Growth for fresh graduates]]></title>
    <link href="http://typd.github.io/blog/2017/12/28/programmer-growth/"/>
    <updated>2017-12-28T22:38:00+08:00</updated>
    <id>http://typd.github.io/blog/2017/12/28/programmer-growth</id>
    <content type="html"><![CDATA[<p>I gave a talk to fresh graduates recently. Look backward is helpful.</p>

<br/>




<div id="pdf-20171228" style="width:600px;height:400px"></div>


<script>
var options = {
  pdfOpenParams: {
  pagemode: "thumbs",
  navpanes: 0,
  toolbar: 0,
  statusbar: 0,
  view: "FitV"
  }
};
PDFObject.embed("/res/programmer-growth/201712-programmer-growth.pdf", "#pdf-20171228", options);
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[美团点评业务风控系统构建经验 @ 中国系统架构师大会 2016]]></title>
    <link href="http://typd.github.io/blog/2016/10/27/sacc/"/>
    <updated>2016-10-27T23:59:00+08:00</updated>
    <id>http://typd.github.io/blog/2016/10/27/sacc</id>
    <content type="html"><![CDATA[<p><img src='http://typd.github.io/res/2016-10-27/201610-sacc-rc_001.png' width="65%"/><br/></p>

<!-- more -->


<p><img src='http://typd.github.io/res/2016-10-27/201610-sacc-rc_002.png' width="65%"/><br/>
<img src='http://typd.github.io/res/2016-10-27/201610-sacc-rc_003.png' width="65%"/><br/>
<img src='http://typd.github.io/res/2016-10-27/201610-sacc-rc_004.png' width="65%"/><br/>
<img src='http://typd.github.io/res/2016-10-27/201610-sacc-rc_005.png' width="65%"/><br/>
<img src='http://typd.github.io/res/2016-10-27/201610-sacc-rc_006.png' width="65%"/><br/>
<img src='http://typd.github.io/res/2016-10-27/201610-sacc-rc_007.png' width="65%"/><br/>
<img src='http://typd.github.io/res/2016-10-27/201610-sacc-rc_008.png' width="65%"/><br/>
<img src='http://typd.github.io/res/2016-10-27/201610-sacc-rc_009.png' width="65%"/><br/>
<img src='http://typd.github.io/res/2016-10-27/201610-sacc-rc_010.png' width="65%"/><br/>
<img src='http://typd.github.io/res/2016-10-27/201610-sacc-rc_011.png' width="65%"/><br/>
<img src='http://typd.github.io/res/2016-10-27/201610-sacc-rc_012.png' width="65%"/><br/>
<img src='http://typd.github.io/res/2016-10-27/201610-sacc-rc_013.png' width="65%"/><br/>
<img src='http://typd.github.io/res/2016-10-27/201610-sacc-rc_014.png' width="65%"/><br/>
<img src='http://typd.github.io/res/2016-10-27/201610-sacc-rc_015.png' width="65%"/><br/>
<img src='http://typd.github.io/res/2016-10-27/201610-sacc-rc_016.png' width="65%"/><br/>
<img src='http://typd.github.io/res/2016-10-27/201610-sacc-rc_017.png' width="65%"/><br/>
<img src='http://typd.github.io/res/2016-10-27/201610-sacc-rc_018.png' width="65%"/><br/>
<img src='http://typd.github.io/res/2016-10-27/201610-sacc-rc_019.png' width="65%"/><br/>
<img src='http://typd.github.io/res/2016-10-27/201610-sacc-rc_020.png' width="65%"/><br/>
<img src='http://typd.github.io/res/2016-10-27/201610-sacc-rc_021.png' width="65%"/><br/>
<img src='http://typd.github.io/res/2016-10-27/201610-sacc-rc_022.png' width="65%"/><br/>
<img src='http://typd.github.io/res/2016-10-27/201610-sacc-rc_023.png' width="65%"/><br/>
<img src='http://typd.github.io/res/2016-10-27/201610-sacc-rc_024.png' width="65%"/><br/>
<img src='http://typd.github.io/res/2016-10-27/201610-sacc-rc_025.png' width="65%"/><br/>
<img src='http://typd.github.io/res/2016-10-27/201610-sacc-rc_026.png' width="65%"/><br/>
<img src='http://typd.github.io/res/2016-10-27/201610-sacc-rc_027.png' width="65%"/><br/>
<img src='http://typd.github.io/res/2016-10-27/201610-sacc-rc_028.png' width="65%"/><br/>
<img src='http://typd.github.io/res/2016-10-27/201610-sacc-rc_029.png' width="65%"/><br/>
<img src='http://typd.github.io/res/2016-10-27/201610-sacc-rc_030.png' width="65%"/><br/>
<img src='http://typd.github.io/res/2016-10-27/201610-sacc-rc_031.png' width="65%"/><br/>
<img src='http://typd.github.io/res/2016-10-27/201610-sacc-rc_032.png' width="65%"/><br/>
<img src='http://typd.github.io/res/2016-10-27/201610-sacc-rc_033.png' width="65%"/><br/>
<img src='http://typd.github.io/res/2016-10-27/201610-sacc-rc_034.png' width="65%"/><br/>
<img src='http://typd.github.io/res/2016-10-27/201610-sacc-rc_035.png' width="65%"/><br/>
<img src='http://typd.github.io/res/2016-10-27/201610-sacc-rc_036.png' width="65%"/><br/>
<img src='http://typd.github.io/res/2016-10-27/201610-sacc-rc_037.png' width="65%"/><br/>
<img src='http://typd.github.io/res/2016-10-27/201610-sacc-rc_038.png' width="65%"/><br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[摩拜单车风控分析]]></title>
    <link href="http://typd.github.io/blog/2016/09/04/mobike-risks/"/>
    <updated>2016-09-04T21:54:00+08:00</updated>
    <id>http://typd.github.io/blog/2016/09/04/mobike-risks</id>
    <content type="html"><![CDATA[<p>身边的出行类产品突然出现了很多，其中最吸引我的还是没有车桩的摩拜单车mobike。我也深度试用了一把，不禁想到风控本行，把单车这样的高频工具通过网络自由借用，风险无疑是极大的。这个案例很有意思，下面从风控的视角分析：</p>

<!-- more -->


<h1>产品分析</h1>

<p>试用数据：4段行程，累计28.2公里，2.5小时，花费7元。</p>

<h3>车的设计</h3>

<ul>
<li>无线车锁，内置了通讯模块，即需要充电，开锁需要网络信号</li>
<li>实心橡胶轮胎，不用打气，不怕扎胎，大大降低维护成本。</li>
<li>金属主体车身相当结实，钢辐条，提高耐久度，且使用内六角螺母，加大拆卸难度；但缺点是自重太大，骑起来稍有费力。</li>
<li>链条盒全封闭，无变速，避免了掉链子问题。</li>
<li>有车铃，无车筐，车座高度无法调节，这些设计权衡牺牲了一定体验，但提高了车辆耐久度。</li>
<li>挡泥板较小，过水潭似乎有溅起到后背的可能。</li>
</ul>


<h3>APP使用流程</h3>

<ul>
<li>扫码自动开锁，关锁自动还车。</li>
<li>注册需身份证实名认证，验证手机短信。</li>
</ul>


<h1>风险分析</h1>

<p>一切欺诈、作弊背后都会有某种诉求，分析风险最直接的方法就是围绕这些“诉求”思考，也就是可以获得哪些“利益”。</p>

<h3>实物（单车）</h3>

<p>最为直接，也是最大的风险。单车造价据说在1000以上，那么盗整车或拆解零件都是要防范的问题。一旦有这样的动机：</p>

<ul>
<li>正常开锁后盗取，仅靠帐号的实名认证约束显然不够。</li>
<li>直接偷盗或拆解。</li>
</ul>


<p>实物风险恐怕不是技术可以彻底解决的，需要有法规威慑和兜底，即使这样，运营时也要有一些Plan B快速止损。</p>

<h3>使用权</h3>

<p>既然使用是一种利益，那么扩大这种利益也是自然的想法。</p>

<ul>
<li>恶意欠费（如果不认定为偷窃），无线锁的设计应该无法自主关锁。</li>
<li>扩大使用权，用户条例里写明不能放置非公共区域，但如何防止用户这么干却是比较麻烦的问题。例如如何界定“公共区域”？可以放在无网络信号，或者限制运营者和其他用户进入的地方。再比如可以利用15分钟预约权来持续锁定车辆，虽然这还比较容易破解，但只要利益有足够吸引力时，“共享作弊服务”就可能出现了。——虽说使用权的利益会随着车辆的增多而变小，但这只是相对的，大如一座城，服务条例天然认为每个角落是平权的，但执行起来不可能做到，因此只要服务正向发展，“使用权”的争夺一定出现。</li>
</ul>


<h3>伤害权</h3>

<p> 即伤害“东家”的“权力”。大家都懂这有很大的可能，来自利益对立方、勒索者甚至只是看不顺眼的团体。作为将带有自己品牌的实物出借的服务，更容易受到伤害。</p>

<ul>
<li>把单车骑到不该它们出现的地方，配合PR的攻击加成。</li>
<li>恶意控制车辆，例如上面提到的无信号或限制运营者进入的地方。再腹黑一点，骑到收费停车棚里锁车走人，这锅恐怕只能东家来背了。</li>
</ul>


<h3>关于帐号</h3>

<p>要求身份证实名认证是一种强势做法，毕竟出借了实物这么要求也有情理。好消息是有了一定威慑作用，坏消息是这作用真的有限，且不说黑产实际控制大量身份证，身份证本身是难以认证归属的，张三用李四的信息注册，未来李四的权益如何保证？</p>

<p>实名认证还是一把双刃剑，后台应该存了姓名+身份证明文（不然无法起到威慑作用），且不说法规是否允许，如果一旦被攻击脱库，对服务和公众都是难以挽回的损失。</p>

<h3>其他</h3>

<p>在如此活跃的经济市场中，在车身贴牛皮癣也是很“好”的点子，“专业疏通”、“疑难杂症”。。。</p>

<h1>但是</h1>

<p>虽说有风险，其实都有其解决之道。风险不会打败创业者，不正视风险才会。经过一天的试用，mobike已深得我心，祝越做越好！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[General development pattern]]></title>
    <link href="http://typd.github.io/blog/2016/08/08/general-development-pattern/"/>
    <updated>2016-08-08T14:14:00+08:00</updated>
    <id>http://typd.github.io/blog/2016/08/08/general-development-pattern</id>
    <content type="html"><![CDATA[<p>Basic stuff, summarize the workflow of development, <a href="http://typd.github.io/res/general-development-pattern/General-development-pattern.pdf">General development pattern</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dive into Guava]]></title>
    <link href="http://typd.github.io/blog/2015/11/15/dive-into-guava/"/>
    <updated>2015-11-15T11:00:00+08:00</updated>
    <id>http://typd.github.io/blog/2015/11/15/dive-into-guava</id>
    <content type="html"><![CDATA[<p>Back to basic, dive into guava:</p>

<!-- more -->




<iframe src="http://typd.github.io/res/dive-into-guava-talk/index.me.html" width="800" height="300" scrolling="no" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen>
</iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Security industry intro]]></title>
    <link href="http://typd.github.io/blog/2015/10/28/security-industry-intro/"/>
    <updated>2015-10-28T23:15:00+08:00</updated>
    <id>http://typd.github.io/blog/2015/10/28/security-industry-intro</id>
    <content type="html"><![CDATA[<p><a href="http://yixi.tv/lecture/314">A talk</a> from the founder of wooyun.</p>

<p>As he said, the motivation was the illness of the web security industry.</p>

<ul>
<li>Web companies value themselves by how much user info they hold</li>
<li>But they care more about their business rather than the responsibility/safety</li>
<li>Only big companies would have security stuff. Even though they are far from doing a good job.</li>
<li>Users should care the security, but their interests are disturbed away, by the companies. Users don&rsquo;t/can&rsquo;t really know about the scenes behind.</li>
<li>The companies ignore security issues even more as users don&rsquo;t care.</li>
</ul>


<p>That&rsquo;s a dead lock. Also that&rsquo;s a bad ecosystem of the hackers. They would take the advantage of the leaks rather than report back to the source, which don&rsquo;t care too much.</p>

<p>To jump out there, someone should do &ldquo;the right thing&rdquo; remarkably. That is, attract hackers to report leaks to the source through a public influential channel. Make companies treat them seriously, and open to public after fixing.</p>

<p>Easier said than done. Technicals, influence, and patience are needed.</p>

<p>More and more data are getting on cloud. In this age, so many things are being unified. One may have huge impact to all, either it&rsquo;s something good, or bad, or even a disaster. Unifing means risks, fragilities. But people are still pursuing better experience, modern life. This is a social evolution nobody can reverse. Only science fictions know the end.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Revelution OS]]></title>
    <link href="http://typd.github.io/blog/2015/10/20/revelution-os/"/>
    <updated>2015-10-20T23:56:00+08:00</updated>
    <id>http://typd.github.io/blog/2015/10/20/revelution-os</id>
    <content type="html"><![CDATA[<p><a href="http://www.bilibili.com/video/av909925/">Revolution OS</a> is a movie about the birth of GNU, Linux, open source definition and so on.</p>

<p>Free software movement and Open Source</p>

<ul>
<li>Free software movement aims to the attitude of life. Open source is more about publishing the source code of software.

<ul>
<li>&ldquo;GNU is an operating system that is free software—that is, it respects users&#8217; freedom. The development of GNU made it possible to use a computer without software that would trample your freedom.&rdquo; <a href="http://www.gnu.org/">http://www.gnu.org/</a></li>
<li>Open source definition <a href="http://opensource.org/osd/">http://opensource.org/osd/</a></li>
</ul>
</li>
</ul>


<p>GNU and Linux</p>

<ul>
<li>GNU tended to release people from using private software. It completed the software first, but stucked on writing the kernel. Then linux came out to be a perfect kernel fit. People combined those two and called GNU/Linux. Later on, other distributions of linux like SuSE/Linux, Red Hat linux came out.</li>
<li>Linus said himself is an &ldquo;engineer&rdquo;, while Richard Stallman is a &ldquo;philosopher&rdquo;.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How app works on heroku]]></title>
    <link href="http://typd.github.io/blog/2014/06/02/how-app-works-on-heroku/"/>
    <updated>2014-06-02T22:32:00+08:00</updated>
    <id>http://typd.github.io/blog/2014/06/02/how-app-works-on-heroku</id>
    <content type="html"><![CDATA[<p>Heroku is a lead service in the Paas field. The <a href="http://12factor.net/">12 factor app</a> is a good summarize of their experiences on how to build a service. Util I&rsquo;ve read <a href="https://devcenter.heroku.com/articles/how-heroku-works">this &ldquo;how heroku works&rdquo; spec</a>, and deployed a service recently, now I know more or less how they achieve that.</p>

<blockquote><h1>Deploy</h1>

<ul>
<li>Applications consist of your source code, a description of any dependencies, and a Procfile.</li>
<li>Procfiles list process types &ndash; named commands that you may want executed.</li>
<li>Deploying applications involves sending the application to Heroku using git.</li>
<li>Buildpacks lie behind the slug compilation process. Buildpacks take your application, its dependencies, and the language runtime, and produce slugs.</li>
<li>A slug is a bundle of your source, fetched dependencies, the language runtime, and compiled/generated output of the build system &ndash; ready for execution.</li>
<li>Config vars contain customizable configuration data that can be changed independently of your source code. The configuration is exposed to a running application via environment variables.</li>
<li>Add-ons are third party, specialized, value-added cloud services that can be easily attached to an application, extending its functionality.</li>
<li>A release is a combination of a slug (your application), config vars and add-ons. Heroku maintains an append-only ledger of releases you make.</li>
</ul>


<h1>Runtime</h1>

<ul>
<li>Dynos are isolated, virtualized unix containers, that provide the environment required to run an application.</li>
<li>Your application’s dyno formation is the total number of currently-executing dynos, divided between the various process types you have scaled.</li>
<li>The dyno manager is responsible for managing dynos across all applications running on Heroku.</li>
<li>Applications with only a single web dyno sleep after one hour of inactivity by the dyno manager. Scaling to multiple web dynos will avoid this.</li>
<li>One-off Dynos are temporary dynos that run with their input/output attached to your local terminal. They’re loaded with your latest release.</li>
<li>Each dyno gets its own ephemeral filesystem &ndash; with a fresh copy of the most recent release. It can be used as temporary scratchpad, but changes to the filesystem are not reflected to other dynos.</li>
<li>Logplex automatically collates log entries from all the running dynos of your app, as well as other components such as the routers, providing a single source of activity.</li>
<li>Scaling an application involves varying the number of dynos of each process type.</li>
</ul>
</blockquote>

<h1>About heroku</h1>

<ul>
<li>As a Paas, I think it&rsquo;s more friendly than Google App Engine. And the specs are good.</li>
<li>No judgement on the stability, real service cost yet.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn from Smartisan T1 Conference]]></title>
    <link href="http://typd.github.io/blog/2014/05/29/learn-from-smartisan-t1-conference/"/>
    <updated>2014-05-29T11:02:00+08:00</updated>
    <id>http://typd.github.io/blog/2014/05/29/learn-from-smartisan-t1-conference</id>
    <content type="html"><![CDATA[<p>事隔几天，看完了<a href="http://v.youku.com/v_show/id_XNzE0Nzc0OTQ0.html">老罗的Smartisan T1发布会</a>。时长两个半小时只一个人演讲，能吸引我在屏幕前不换台，当然是有其牛逼之处的。</p>

<h1>对行业本身的信息</h1>

<ul>
<li>电子消费品的全行业产业链可谓已经十分成熟。芯片、机型制造、相机、电池、系统、客服、物流，哪怕是大家各自标榜的“人性化”设计，其实都有足够成熟、专业的分解提供商，真正“自家”的，大概主要是拍板产品理念，对各提供商产品的使用、组装，和必要的软件开发。当然这也不简单，不过还是有些攒机之感。</li>
<li>苹果太成功，让大家心悦诚服的追赶。苹果固然有产业链中积累的优势，但后起者都信心满满觉得可以超越。雷军说苹果卖服务，老罗说卖软件，但都不认为核心是硬件本身，这点起码靠谱。</li>
</ul>


<h1>演讲和营销策略</h1>

<ul>
<li>说老罗会演讲，恐怕大多数人不会反对，以前&#8221;老罗英语学校&#8221;的第一年演讲也不错</li>
<li>作为后起的&#8221;小厂商&#8221;，营销策略尤为重要，这里做的也很聪明

<ul>
<li>&ldquo;我很懂每一个环节，芯片、声音、相机、设计、软件等等&#8221;（当然你说还不够）</li>
<li>&ldquo;我用了最牛逼的芯片，声音调试，相机调试，设计，你可以不相信我，但谁谁谁你认识吧，不否认吧，软件我做的，我演示给你看；我就是搅局者，别以为别家每个环节都是自己做的，他们也不过是组装商，还没有好的选择品味。&rdquo;</li>
<li>额外的心理营销，找到独特的痛点：捐助openSSL，门票抵现，防摔保险，背夹电池</li>
</ul>
</li>
</ul>


<h1>一些感受</h1>

<ul>
<li>手机固然是兵家必争之地，如此激烈的竞争中还能创新，确实值得佩服。即便是用了那么多外包的服务，不可否认这个团队认真的思考了方方面面，组装也是品味要求</li>
<li>另一方面，产业链确实更成熟了，设计的作用日渐突出，这也是很多快速发展事务中更迭尤其快的部分。设计的创新可以带动一个产业</li>
<li>也不难理解越来越多的设计资源集中在了电子产品上，更多资金、人力投入让这个产业的设计水准可以与汽车、家居等设计集中领领域比较。<a href="http://v.youku.com/v_show/id_XNTIwMjg0MTky.html">工业设计的发展过程本身也很有意思</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Catch up the change]]></title>
    <link href="http://typd.github.io/blog/2014/05/20/catch-up-the-change/"/>
    <updated>2014-05-20T13:38:00+08:00</updated>
    <id>http://typd.github.io/blog/2014/05/20/catch-up-the-change</id>
    <content type="html"><![CDATA[<p>A senior co-worker gave a talk about his work and philosophy, which is interesting.</p>

<p>His team called &ldquo;DevOps&rdquo; has build the internal development infrastructure, similar to AWS (manage machines) and heroku (service container), and other common tools. Those are useful and critical, but &ldquo;not the goal of the team&rdquo;. The motivation was not to build the Paas (internal heroku) itself, but to unify the developers way of handling the details around a service, like deployment, dependencies, logging, etc. (heroku has a high level <a href="http://12factor.net/">spec to explain the idea</a>). We don&rsquo;t want to sacrifice either speed or quality. To achieve that, building the service container platform is a smart choice, for coaching devs, and improving quality. So the idea behind, is really about improving the tech culture.</p>

<p>Jump out of there, this &ldquo;implicit&rdquo; way of doing things is rather &ldquo;interesting&rdquo;. The modern software development is creative and collaborative, especially for quality ones. It has become a social practise in many ways. Not only the market, requirements, dev language, tools, knowledge are changing, people also come and go. It&rsquo;s not always pratical to &ldquo;force&rdquo; all acting in a certain way. But you can &ldquo;lead&rdquo; the majority to catch up the change.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What makes a good engineering culture?]]></title>
    <link href="http://typd.github.io/blog/2014/04/22/what-makes-a-good-engineering-culture/"/>
    <updated>2014-04-22T13:58:00+08:00</updated>
    <id>http://typd.github.io/blog/2014/04/22/what-makes-a-good-engineering-culture</id>
    <content type="html"><![CDATA[<p>I had many posts talk about engineering culture. Here&rsquo;s <a href="http://goo.gl/2VlzmQ">a good one</a> from others summaries the characters of a good culture.</p>

<blockquote><ul>
<li>Optimize for iteration speed

<ul>
<li>Team-wise, fast iteration speed means having a set of strong leaders to help coordinate and drive team efforts</li>
</ul>
</li>
<li>Push relentlessly toward automation

<ul>
<li>deploying, testing, etc</li>
</ul>
</li>
<li>Build the right software abstractions</li>
<li>Develop a focus on high code quality with code reviews</li>
<li>Maintain a respectful work environment</li>
<li>Build shared ownership of code</li>
<li>Allot 20% time</li>
<li>Build a culture of learning and continuous improvement</li>
<li>Hire the best</li>
</ul>
</blockquote>

<p>This can be a check list for evaluating a company.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About onboarding process]]></title>
    <link href="http://typd.github.io/blog/2014/04/22/about-onboarding-process/"/>
    <updated>2014-04-22T13:45:00+08:00</updated>
    <id>http://typd.github.io/blog/2014/04/22/about-onboarding-process</id>
    <content type="html"><![CDATA[<p>When joining a new place, many devs may have similar situation as <a href="http://goo.gl/8n7hZv">this artical</a> described:</p>

<blockquote><p>I found myself wading through a codebase laced with technical debt and augmented with little documentation and no unit tests, written in a Java-like language called ActionScript that I wasn’t familiar with. I had two weeks to build and launch a feature already promised to video publishers, a feature that would allow them to schedule when their online videos would go on the air.</p></blockquote>

<p>And later some better onboarding experiences made him think what a good process should be.</p>

<p><strong>First, does it worth to invest time to onboarding process?</strong></p>

<blockquote><p> The onboarding process is an opportunity to direct the learning and the activity of a new hire toward what the team believes matters most.</p></blockquote>

<p><strong>Quora&rsquo;s goals when designing the process</strong></p>

<ul>
<li>Ramp up a new employee as quickly as possible</li>
<li>Impart the startup’s culture and values</li>
<li>Expose the new employee to the breadth of fundamentals needed to succeed

<ul>
<li>Those engineers who learned the fundamental tools and abstractions well will do better</li>
</ul>
</li>
<li>Socially integrate the new employee onto the team</li>
</ul>


<p>There&rsquo;re more details to describe how they archive these goals.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is design about?]]></title>
    <link href="http://typd.github.io/blog/2014/04/14/what-is-design-about/"/>
    <updated>2014-04-14T15:47:00+08:00</updated>
    <id>http://typd.github.io/blog/2014/04/14/what-is-design-about</id>
    <content type="html"><![CDATA[<p>This is a <a href="http://goo.gl/bcjRYc">good talk</a> tells &ldquo;what is design about&rdquo;.</p>

<ul>
<li>Focus, deliver quality</li>
<li>Compromise</li>
<li>Think about the context</li>
<li>Worry about the right thing: users&#8217; problem, not yours

<ul>
<li>Design thinking must trickle down

<ul>
<li>&ldquo;Great design is a symptom of a design-led org structure &amp; engineering process&rdquo;</li>
<li>Design is not democratic</li>
<li>Design is not beautiful pictures either: can&rsquo;t separate engineering and design</li>
</ul>
</li>
</ul>
</li>
<li>Design is about: understanding humans, and make things for humans

<ul>
<li>psychology</li>
<li>neuroscience</li>
<li>linguistics</li>
<li>sociology</li>
<li>philosophy</li>
</ul>
</li>
<li>Empathy, details matter</li>
</ul>


<p>The presenter gave a good example of washing machine at the end. Remind me of designing an interface in programming.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Michael Jordan's 3rd Champion]]></title>
    <link href="http://typd.github.io/blog/2014/03/31/michael-jordans-3rd-champion/"/>
    <updated>2014-03-31T23:33:00+08:00</updated>
    <id>http://typd.github.io/blog/2014/03/31/michael-jordans-3rd-champion</id>
    <content type="html"><![CDATA[<p>仔细读完了<a href="http://my.hupu.com/zhangjiawei/blog/6424835.html">这篇</a>文章，介绍公牛第三冠的幕前幕后。92-93还不是我看球的年纪，但以现在的理解，读起来感同身受。</p>

<p>竞技体育从来不止于体育本身，运动提供平台，加上太多技术的、战术的、心理的、团队的、社会的因素。不同层次的球员，不同层次的理解，在面对不同的问题。这到底是团队运动，神如乔丹也不能以一敌五，但神如乔丹可以理解比赛，推动队友。</p>

<p>像之前一篇里老师讲的，体育比赛和交响乐相似，因为足够复杂，才足够吸引人。简单的东西容易腻，复杂的东西看也看不完。</p>

<p>北京金隅昨天夺冠，37的老马还能找到和带领球队，真是幸事。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA['Solving hard things early' from Facebook VP]]></title>
    <link href="http://typd.github.io/blog/2014/03/23/solving-hard-things-early-from-facebook-vp/"/>
    <updated>2014-03-23T23:31:00+08:00</updated>
    <id>http://typd.github.io/blog/2014/03/23/solving-hard-things-early-from-facebook-vp</id>
    <content type="html"><![CDATA[<p>Information technology is a fast industry now. Companies come and go. People keep thinking about new strategy of management in such rapid growing. <a href="http://ondrejka.net/">Facebook engineering VP</a> gives an <a href="http://firstround.com/article/Facebook-VP-of-Engineering-on-Solving-Hard-Things-Early">experience sharing</a> talk, which has many good points. Below are some quotes with my comments.</p>

<h1>Common mistakes</h1>

<blockquote><ul>
<li>Every early stage company thinks it has reinvented management. In fact they have not!</li>
<li>Management is not about who is who’s boss. Management is the opportunity to explicitly choose tradeoffs. No silver bullet for all!</li>
</ul>
</blockquote>

<p>It&rsquo;s a very good point that you should know the pros and cons of the management style you chose.</p>

<h1>For early management</h1>

<blockquote><ul>
<li>Build management and organizational structures around the strengths your company needs to succeed.</li>
<li>Recognize and plan for the weaknesses that you know are inherent in the structures you pick.</li>
<li>Build great habits around communication and decision-making when everyone still knows each other well.</li>
</ul>
</blockquote>

<h1>Culture</h1>

<h2>Why you need it from start</h2>

<blockquote><ul>
<li>In a small team, every one can learn from founders, but when it scales, information gets lost.</li>
<li>“Culture is defined by differing from the norm. It can’t be like everyone else’s.”</li>
</ul>
</blockquote>

<h2>Practical methods of building it</h2>

<blockquote><ul>
<li>The CEO must own encoding and transmitting culture.</li>
<li>Write down what makes your company different.</li>
<li>Describe culture in ways that  make people think and debate rather than universally agree.</li>
</ul>
</blockquote>

<h2>Facebook&rsquo;s lesson</h2>

<blockquote><p>Facebook’s “Move Fast and Break Things” tagline is a canonical example. It has challenged every new employee to realize it&rsquo;s worth some amount of risk to keep innovating, experimenting and moving forward. And to avoid becoming overly conservative even when a mistake could impact a billion people.</p></blockquote>

<h1>Conclusion</h1>

<blockquote><p>Building great management and great culture is never easy nor complete, but both are much harder to tackle when product has already shipped. Take advantage of the benefits of build phase to start early and tackle these hard problems before they become so massive they put the company’s success on the line.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to listen to classic music?]]></title>
    <link href="http://typd.github.io/blog/2014/03/16/how-to-listen-to-classic-music/"/>
    <updated>2014-03-16T20:22:00+08:00</updated>
    <id>http://typd.github.io/blog/2014/03/16/how-to-listen-to-classic-music</id>
    <content type="html"><![CDATA[<p>怎么听“严肃/高雅”音乐，听不懂怎么办，是个很常见的问题。于是就有这样一个中央音乐学院副院长，用毫无门槛的姿态，给中央党校的未来土豪领导们<a href="http://goo.gl/USy6en">解释了这个问题</a>。讲座很有技巧，深入浅出，有很多现场赏析来辅佐解释，当然最重要的还是内容本身：</p>

<blockquote><p>听懂音乐?</p>

<ul>
<li>中国古有“高山流水遇知音”的追求，导致大家以此为最高境界，追求“听懂”音乐</li>
<li>客观上音乐不是视觉，很难实现“听懂”需要的视觉联想</li>
<li>实际上音乐确实能够产生联想，主要靠&#8221;联觉&#8221;现象，声音高低快慢会对应相应的其他物理感受，冷热快慢积极消极等</li>
<li>音乐无所谓听不听的懂，听懂的是什么，因为没有固定答案，放松听就可以</li>
</ul>


<p>为什么听&#8221;严肃/高雅&#8221;音乐?</p>

<ul>
<li>“严肃/高雅”音乐比通俗音乐更复杂

<ul>
<li>随年龄、理解力、注意力增长，人对通俗音乐会觉得太简单</li>
<li>如果确实不喜欢呢？有的复杂的东西需要一定耐受力，还没有体会到复杂背后的美感</li>
<li>“没有强烈的期待，就没有强烈的感动”，复杂音乐像看足球，懂球的人会关注过程，不懂的人只看进球，产生的感受无法和关注了过程的人相比</li>
</ul>
</li>
</ul>


<p>培养感性能力</p>

<ul>
<li>完善的人需要获得幸福条件的能力（理性），也需要体验幸福感受的能力（感性能力）</li>
<li>国人不重视发展感性能力——导致感觉器官不发达，能解释很多现象

<ul>
<li>有物质财富但感觉不到幸福</li>
<li>停留在简单的感官刺激（吃、喝酒、赌、搓脚等）——容易腻</li>
<li>在很多其他方面麻木，音乐、旅游等没兴趣，感受不到艺术的存在</li>
<li>察觉不到审美需求，在做取舍判断时毫不顾忌审美</li>
</ul>
</li>
</ul>
</blockquote>

<p>前面的部分讲的是音乐本身，后面引申到艺术的必要性。为什么公众普遍不重视艺术，这是个很好的解释。感性也是一种能力，需要培养和发展。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zen of programming]]></title>
    <link href="http://typd.github.io/blog/2014/02/28/zen-of-programming/"/>
    <updated>2014-02-28T23:36:00+08:00</updated>
    <id>http://typd.github.io/blog/2014/02/28/zen-of-programming</id>
    <content type="html"><![CDATA[<p>When many things become mature, they start to get a simple philosophy, but cover a lot of thoughts underneath. That&rsquo;s the abstraction of all complexities. Like Zen.</p>

<p>This phenomenon can be seen on some hand made craft, like a program from a programmer. But it&rsquo;s always difficult to expose the beauty of it, with an easy, friendly way that non-programmer can recognize. Or say, only real master with deep love of life can do it right. Like <a href="http://www.baroque.me/">this one</a>.</p>

<p>Can&rsquo;t express my praise enough on this.</p>

<ul>
<li>Need sounds on while you watching the balls.</li>
<li>The circles, strings, with right speed, are playing Bach&rsquo;s Cello Suites in a way I&rsquo;ve never thought of.</li>
<li>Just as beautiful as Bach&rsquo;s Cello Suites.</li>
</ul>


<p>From the <a href="http://blog.chenalexander.com/2011/baroque-bach-cello/">author&rsquo;s words</a>, you can know the complexities behind scene. Also some <a href="http://work.chenalexander.com/">other works</a> from <a href="http://work.chenalexander.com/bio">him</a>. If you still remember the <a href="http://www.google.com/logos/2011/lespaul.html">string logo of google</a>, yes, it&rsquo;s created by him.</p>

<p>When a person become mature, he&rsquo;ll also get a simple mind, be generous, friendly to others and himself.</p>
]]></content>
  </entry>
  
</feed>
