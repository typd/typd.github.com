<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Yizhe Tang]]></title>
  <link href="http://typd.github.io/atom.xml" rel="self"/>
  <link href="http://typd.github.io/"/>
  <updated>2013-10-16T23:53:39+08:00</updated>
  <id>http://typd.github.io/</id>
  <author>
    <name><![CDATA[Yizhe Tang]]></name>
    <email><![CDATA[othertang@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A data science sharing from Hilary Mason of bit.ly]]></title>
    <link href="http://typd.github.io/blog/2013/10/16/a-data-science-sharing-from-hilary-mason-of-bit-dot-ly/"/>
    <updated>2013-10-16T23:17:00+08:00</updated>
    <id>http://typd.github.io/blog/2013/10/16/a-data-science-sharing-from-hilary-mason-of-bit-dot-ly</id>
    <content type="html"><![CDATA[<p>This is a <a href="https://bitly.com/A5Mjsv">good talk</a> from Chief Scientist at bit.ly. It&rsquo;s interesting to use and present your data wisely indeed. And I&rsquo;m more interested at the factors make this a good talk</p>

<ul>
<li>The solid work and thinking behind</li>
<li>A logical structure of the talk</li>
<li>The attibute of sharing, not just showing off the done work or owned data</li>
<li>A good researcher needs to have a practical tool set, and good engineering sense</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Qt and PyQt]]></title>
    <link href="http://typd.github.io/blog/2013/10/16/qt-and-pyqt/"/>
    <updated>2013-10-16T18:46:00+08:00</updated>
    <id>http://typd.github.io/blog/2013/10/16/qt-and-pyqt</id>
    <content type="html"><![CDATA[<p>Sometimes it bothers me how to write UI program cross-platform, or just get rid of Visual Studio. Qt has been referenced a lot for that. Here are some notes based on my experience, understanding of Qt, pyQt.</p>

<h1>What&rsquo;s Qt</h1>

<ul>
<li><p>Quoted, <a href="http://qt-project.org/">Qt</a> is a cross-platform application and UI framework for developers using C++ or QML, a CSS &amp; JavaScript like language.</p></li>
<li><p>Owned by Nokia previously, then was sold to Digia.</p></li>
<li><p>Natively, you need to write C++.</p></li>
<li><p>Qt Creator is the supporting Qt IDE. Within it, Qt Designer is used for composing UI. Seems it looks pretty much like the WinForm drag down support from Visual Studio.</p></li>
<li><p>Highlights: cross-platform, native appearance based on platform, which means by using same code base, the release program may look like a windows program on windows, and a mac one on mac.</p></li>
<li><p>Latest version, Qt5.1</p></li>
</ul>


<h1>Python solution</h1>

<p>Of course you don&rsquo;t have to write C++. PyQt and pySide are the py solutions.</p>

<ul>
<li>PyQt

<ul>
<li>Uses same verion number as Qt, PyQt4 is for Qt4, PyQt5 is for PyQt5.</li>
<li>Owned by riverbank, a uk company.</li>
<li>Licenses including GPL v3 and a commercial license. Which means for commercial usages, pay it <a href="http://www.riverbankcomputing.co.uk/commercial/buy">here</a></li>
</ul>
</li>
<li>pySide

<ul>
<li>License LGPL, no need to pay for commercial usage</li>
<li>Seems not under actively developing, release for Qt5 is still not ready yet, <a href="http://qt-project.org/wiki/PySide_Roadmap">pySide roadmap</a></li>
</ul>
</li>
</ul>


<p>I choose <a href="http://www.riverbankcomputing.com/software/pyqt/download5">PyQt5</a>.</p>

<h1>Setup them</h1>

<p>Things to do</p>

<ul>
<li>Install Qt5, which contains Qt Creator

<ul>
<li><a href="http://qt-project.org/downloads">download</a></li>
</ul>
</li>
<li>Install PyQt

<ul>
<li>note, I had problem with python3, python2 works fine</li>
<li>Install SIP, seems SIP is used for converting C++ code to python

<ul>
<li><a href="http://www.riverbankcomputing.com/software/sip/download">download</a></li>
<li>note, the hg checked out version has a problem on sip.h, the tar ball works fine</li>
<li>python configurate.py &amp;&amp; make &amp;&amp; make install</li>
<li>add sip executor to your PATH</li>
</ul>
</li>
<li>Install PyQt5

<ul>
<li><a href="http://www.riverbankcomputing.co.uk/software/pyqt/download5">download</a></li>
<li>python configurate.py &amp;&amp; make &amp;&amp; make install</li>
</ul>
</li>
</ul>
</li>
</ul>


<h1>Examples</h1>

<p>PyQt examples are included in the tar ball, PyQt-gpl-5.1/examples. Start it from PyQt-gpl-5.1/examples/qtdemo/qtdemo.py</p>

<p>An example can be as simple as</p>

<pre><code>import sys

from PyQt5.QtWidgets import QApplication
from PyQt5.QtWidgets import QWidget

class Window(QWidget):
    def __init__(self, parent=None):
        super(Window, self).__init__(parent)
        self.resize(360, 150)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = Window()
    window.show();
    app.exec_()
</code></pre>

<h1>Some more</h1>

<p>Qt, PyQt, pySide seems all these are not well maintained. The offical sides are as convinient as I suppose they should be. Instructions, readmes, sample code contains some bug and mistakes more or less.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[articals from The best software writing I]]></title>
    <link href="http://typd.github.io/blog/2013/10/14/articals-from-the-best-software-writing-i/"/>
    <updated>2013-10-14T22:51:00+08:00</updated>
    <id>http://typd.github.io/blog/2013/10/14/articals-from-the-best-software-writing-i</id>
    <content type="html"><![CDATA[<p>The best software writing I is a book contains Joel Spolsky&rsquo;s selection and some comments of articals around 2004 or so, while this is the Joel of &ldquo;Joel on Software&rdquo;. I found the orginal posts&#8217; links are available in this doubaner&rsquo;s <a href="http://book.douban.com/review/1449189/">review</a>. Some worth a read, some worth to be shared,</p>

<ul>
<li><p><a href="http://paulgraham.com/gh.html">Great Hackers</a> by Paul Graham, you know &ldquo;Hackers and Painters&rdquo;</p>

<p>It&rsquo;s a long post with nice words.</p>

<p>A great hacker has much much more productivity than a normal developer. Someone says there&rsquo;re 5 levels of developers, the productivity scales 10 between each 2 levels.</p>

<p>Hackers have strong curiosity, the intention to know how things work.</p>

<p>No guarantee on whether someone can become a hacker or not. Raw talent, habit, even personality decides your potential. It&rsquo;s even hard to identify if someone is a hacker.</p>

<p>Release the hackers!</p></li>
<li><p><a href="http://blogs.msdn.com/b/ericlippert/archive/2003/10/28/53298.aspx">How many Microsoft employees does it take to change a lightbulb?</a></p>

<p>Microsoft seems to be an old-fasion in software world to me. The software technics and theories have changed a lot since delivered software is not as popular as cloud ones. We should all know the differences. The key to the first one is stability, every change there is expensive, while the later one we need most is rapid developing and delivering.</p>

<p>No matter what, I really admire Microsoft delivers softwares as complicated as windows and office, even having thousands of developers work on one project is a miracal, needs excellent software engineering with no doubt.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读书笔记转载《程序员的思维修炼》]]></title>
    <link href="http://typd.github.io/blog/2013/10/13/du-shu-bi-ji-zhuan-zai-cheng-xu-yuan-de-si-wei-xun-lian/"/>
    <updated>2013-10-13T22:51:00+08:00</updated>
    <id>http://typd.github.io/blog/2013/10/13/du-shu-bi-ji-zhuan-zai-cheng-xu-yuan-de-si-wei-xun-lian</id>
    <content type="html"><![CDATA[<p>偶然看到别人的《程序员的思维修炼》读书笔记，想起来自己也读过，确实还不错。这本书帮助从程序员的角度对自身能力进行反思，道理并不复杂，很多时候生产力就来自于把简单的事情理清楚。经常反思自己是一种好的习惯，对所有人都是。</p>

<p>自己也做了读书笔记，不过是更按自己记忆所需，比如这个版本碎片化可读性强，转载下来：</p>

<p><a href="http://blog.leezhong.com/reading/2013/10/06/pragmatic-thinking-and-learning.html">http://blog.leezhong.com/reading/2013/10/06/pragmatic-thinking-and-learning.html</a></p>

<pre><code>培养幽默感，以建立更强大的隐喻。

两个想法相距越远，越难以通过有效的隐喻联系起来。但我们遇到一个格外具有创造性的隐喻，且两参照系距离适中，我们就不得不几百年来一直歌颂这位作者。

增加感官体验，以促进大脑的使用。

直觉和模式匹配能力超越了显性知识。

你的价值取决于你为团队带来的价值。

大脑不是软件，软件不会老化，不会退化。但是大脑必须刷新，必须使用，否则就会丢失记忆。

R型在存储输入方面非常卖力，事实上可能你的每次经历，无论多么平淡乏味，都会被存储。但是它不一定被索引。当你努力解决一个问题时，R型进程会搜索你的所有记忆以寻找解决方案。

L型处理语言、分析、符号、抽象、时间、推理、数字、逻辑、现象思维。

R型处理直觉、综合、想象。

积极的情感对学习和创造性思维非常关键。当你充满了消极情绪时，你的大脑就开始停止提供多余的资源。

美学可以改变这些，不论是用户界面、代码和注释的布局，还是变量名的选择或桌面的整理。

当你努力解决一个问题时，你的所有记忆都会被扫描——甚至那些你无法主动唤醒的记忆。

养成一种收集思维鹅卵石的习惯，一旦有了积累，造墙的过程就会很容易。

你是否注意到伟大的想法或者领悟可能会在最出乎意料的时候降临？比如洗澡、刷盘子或其他一些枯燥、琐碎的工作时。这是因为L型有点厌倦了这种常规任务，走了神，这才让R型得以自由地展示自己地发现。

改变解决问题的角度（角色扮演）。

培养快速的洞察力，寻找不相关事物之间的关系或类比。

大脑不是一个用于填充的容器，而是一束需要点燃的火焰。这不是别人可以帮你做的，而是一件你必须自己做的事情。

建立SMART任务实现你的目标。

所有的知识投资都有价值。即使你从来不会在工作中使用某项技术，它也会影响你思考和解决问题的方式。

考虑投资的回报率。

当你种菜时，如果菜长的不好，你不会怪责菜，你会寻找其他理由。菜可能需要更多的肥料或者水，或者少晒太阳，你决不会怪责菜。

SQ3R主动学习法(Survy, Question, Read, Recite, Review)。

使用思维导图做笔记。

以教代学（橡皮鸭调试法），向你所在领域之外的人解释。

把事物分成大脑足以容纳的几部分。

L型模式的CPU有一种「空闲循环」程序，如果没有更紧迫的事情值得你去注意，闲置程序将会停留在一些低等级的困扰或紧急的问题上，而这会干扰R型的处理。

大部分冥想、瑜伽以及类似的练习都是为了这个相同的目标：缓和大脑里L型嘈杂的声音所带来的痛苦，生活在此刻，不要将你的精力不必要的分散，因为内心中喋喋不休的事情会击倒我们。

使用wiki来管理信息和知识。

「不作为」是敌人，「错误」不是。

给新习惯适应的时间。

制定一段时间计划，然后努力实现。跟踪你的进度，当你感觉做得不够时，重新审视你的成果。

信念是真实的，你必须相信这种改变是可能的。

采取步步为营的细小步骤。

新手的大脑有很多可能性，但是专家的却很少。

抓住方向盘，不要自动驾驶。
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello]]></title>
    <link href="http://typd.github.io/blog/2013/07/12/hello/"/>
    <updated>2013-07-12T16:39:00+08:00</updated>
    <id>http://typd.github.io/blog/2013/07/12/hello</id>
    <content type="html"><![CDATA[<h1>hello world</h1>

<p>this is the first line.</p>

<p>this is the second line</p>
]]></content>
  </entry>
  
</feed>
